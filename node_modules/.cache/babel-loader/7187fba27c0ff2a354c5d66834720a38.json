{"ast":null,"code":"import { MathUtils } from 'three';\nimport { ShaderPass } from '../../postprocessing/ShaderPass.js';\nimport { NodeMaterial } from '../materials/NodeMaterial.js';\nimport { ScreenNode } from '../inputs/ScreenNode.js';\n\nfunction NodePass() {\n  ShaderPass.call(this);\n  this.name = '';\n  this.uuid = MathUtils.generateUUID();\n  this.userData = {};\n  this.textureID = 'renderTexture';\n  this.input = new ScreenNode();\n  this.material = new NodeMaterial();\n  this.needsUpdate = true;\n}\n\nNodePass.prototype = Object.create(ShaderPass.prototype);\nNodePass.prototype.constructor = NodePass;\n\nNodePass.prototype.render = function () {\n  if (this.needsUpdate) {\n    this.material.dispose();\n    this.material.fragment.value = this.input;\n    this.needsUpdate = false;\n  }\n\n  this.uniforms = this.material.uniforms;\n  ShaderPass.prototype.render.apply(this, arguments);\n};\n\nNodePass.prototype.copy = function (source) {\n  this.input = source.input;\n  return this;\n};\n\nNodePass.prototype.toJSON = function (meta) {\n  var isRootObject = meta === undefined || typeof meta === 'string';\n\n  if (isRootObject) {\n    meta = {\n      nodes: {}\n    };\n  }\n\n  if (meta && !meta.passes) meta.passes = {};\n\n  if (!meta.passes[this.uuid]) {\n    var data = {};\n    data.uuid = this.uuid;\n    data.type = 'NodePass';\n    meta.passes[this.uuid] = data;\n    if (this.name !== '') data.name = this.name;\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\n    data.input = this.input.toJSON(meta).uuid;\n  }\n\n  meta.pass = this.uuid;\n  return meta;\n};\n\nexport { NodePass };","map":null,"metadata":{},"sourceType":"module"}