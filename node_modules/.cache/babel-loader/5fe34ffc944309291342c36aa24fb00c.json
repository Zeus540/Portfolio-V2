{"ast":null,"code":"import { FloatNode } from '../inputs/FloatNode.js';\nimport { NodeLib } from '../core/NodeLib.js';\n\nfunction TimerNode(scale, scope, timeScale) {\n  FloatNode.call(this);\n  this.scale = scale !== undefined ? scale : 1;\n  this.scope = scope || TimerNode.GLOBAL;\n  this.timeScale = timeScale !== undefined ? timeScale : scale !== undefined;\n}\n\nTimerNode.GLOBAL = 'global';\nTimerNode.LOCAL = 'local';\nTimerNode.DELTA = 'delta';\nTimerNode.prototype = Object.create(FloatNode.prototype);\nTimerNode.prototype.constructor = TimerNode;\nTimerNode.prototype.nodeType = 'Timer';\n\nTimerNode.prototype.getReadonly = function () {\n  // never use TimerNode as readonly but aways as \"uniform\"\n  return false;\n};\n\nTimerNode.prototype.getUnique = function () {\n  // share TimerNode \"uniform\" input if is used on more time with others TimerNode\n  return this.timeScale && (this.scope === TimerNode.GLOBAL || this.scope === TimerNode.DELTA);\n};\n\nTimerNode.prototype.updateFrame = function (frame) {\n  var scale = this.timeScale ? this.scale : 1;\n\n  switch (this.scope) {\n    case TimerNode.LOCAL:\n      this.value += frame.delta * scale;\n      break;\n\n    case TimerNode.DELTA:\n      this.value = frame.delta * scale;\n      break;\n\n    default:\n      this.value = frame.time * scale;\n  }\n};\n\nTimerNode.prototype.copy = function (source) {\n  FloatNode.prototype.copy.call(this, source);\n  this.scope = source.scope;\n  this.scale = source.scale;\n  this.timeScale = source.timeScale;\n  return this;\n};\n\nTimerNode.prototype.toJSON = function (meta) {\n  var data = FloatNode.prototype.toJSON.call(this, meta);\n  data.scope = this.scope;\n  data.scale = this.scale;\n  data.timeScale = this.timeScale;\n  return data;\n};\n\nNodeLib.addKeyword('time', function () {\n  return new TimerNode();\n});\nexport { TimerNode };","map":null,"metadata":{},"sourceType":"module"}