{"ast":null,"code":"import { Node } from './Node.js';\n\nfunction AttributeNode(name, type) {\n  Node.call(this, type);\n  this.name = name;\n}\n\nAttributeNode.prototype = Object.create(Node.prototype);\nAttributeNode.prototype.constructor = AttributeNode;\nAttributeNode.prototype.nodeType = 'Attribute';\n\nAttributeNode.prototype.getAttributeType = function (builder) {\n  return typeof this.type === 'number' ? builder.getConstructorFromLength(this.type) : this.type;\n};\n\nAttributeNode.prototype.getType = function (builder) {\n  var type = this.getAttributeType(builder);\n  return builder.getTypeByFormat(type);\n};\n\nAttributeNode.prototype.generate = function (builder, output) {\n  var type = this.getAttributeType(builder);\n  var attribute = builder.getAttribute(this.name, type),\n      name = builder.isShader('vertex') ? this.name : attribute.varying.name;\n  return builder.format(name, this.getType(builder), output);\n};\n\nAttributeNode.prototype.copy = function (source) {\n  Node.prototype.copy.call(this, source);\n  this.type = source.type;\n  return this;\n};\n\nAttributeNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.type = this.type;\n  }\n\n  return data;\n};\n\nexport { AttributeNode };","map":null,"metadata":{},"sourceType":"module"}