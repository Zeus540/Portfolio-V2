{"ast":null,"code":"import _slicedToArray from \"/home/zeus/Personal/Portfolio-V2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\nconst ContactShadows =\n/*#__PURE__*/\nReact.forwardRef(({\n  scale,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 256,\n  smooth = true,\n  ...props\n}, ref) => {\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n\n  const _React$useMemo = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale]),\n        _React$useMemo2 = _slicedToArray(_React$useMemo, 7),\n        renderTarget = _React$useMemo2[0],\n        planeGeometry = _React$useMemo2[1],\n        depthMaterial = _React$useMemo2[2],\n        blurPlane = _React$useMemo2[3],\n        horizontalBlurMaterial = _React$useMemo2[4],\n        verticalBlurMaterial = _React$useMemo2[5],\n        renderTargetBlur = _React$useMemo2[6];\n\n  const blurShadows = React.useCallback(blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  }, []);\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return (\n    /*#__PURE__*/\n    React.createElement(\"group\", _extends({\n      \"rotation-x\": Math.PI / 2\n    }, props, {\n      ref: ref\n    }),\n    /*#__PURE__*/\n    React.createElement(\"mesh\", {\n      geometry: planeGeometry,\n      scale: [1, -1, 1],\n      rotation: [-Math.PI / 2, 0, 0]\n    },\n    /*#__PURE__*/\n    React.createElement(\"meshBasicMaterial\", {\n      map: renderTarget.texture,\n      transparent: true,\n      opacity: opacity\n    })),\n    /*#__PURE__*/\n    React.createElement(\"orthographicCamera\", {\n      ref: shadowCamera,\n      args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n    }))\n  );\n});\nexport { ContactShadows };","map":null,"metadata":{},"sourceType":"module"}