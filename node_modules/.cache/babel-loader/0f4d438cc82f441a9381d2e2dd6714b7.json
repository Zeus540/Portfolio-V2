{"ast":null,"code":"import _slicedToArray from \"/home/zeus/Personal/Portfolio-V2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Environment } from './Environment.js';\nimport { ContactShadows } from './ContactShadows.js';\nconst presets = {\n  rembrandt: {\n    main: [1, 2, 1],\n    fill: [-2, -0.5, -2]\n  },\n  portrait: {\n    main: [-1, 2, 0.5],\n    fill: [-1, 0.5, -1.5]\n  },\n  upfront: {\n    main: [0, 2, 1],\n    fill: [-1, 0.5, -1.5]\n  },\n  soft: {\n    main: [-2, 4, 4],\n    fill: [-1, 0.5, -1.5]\n  }\n};\n\nfunction Stage({\n  children,\n  controls,\n  shadows = true,\n  adjustCamera = true,\n  environment = 'city',\n  intensity = 1,\n  preset = 'rembrandt',\n  shadowBias = 0,\n  contactShadow = {\n    blur: 2,\n    opacity: 0.5,\n    position: [0, 0, 0]\n  },\n  ...props\n}) {\n  const config = presets[preset];\n  const camera = useThree(state => state.camera); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const defaultControls = useThree(state => state.controls);\n  const outer = React.useRef(null);\n  const inner = React.useRef(null);\n\n  const _React$useState = React.useState({\n    radius: 0,\n    width: 0,\n    height: 0\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        _React$useState2$ = _React$useState2[0],\n        radius = _React$useState2$.radius,\n        width = _React$useState2$.width,\n        height = _React$useState2$.height,\n        set = _React$useState2[1];\n\n  React.useLayoutEffect(() => {\n    outer.current.position.set(0, 0, 0);\n    outer.current.updateWorldMatrix(true, true);\n    const box3 = new THREE.Box3().setFromObject(inner.current);\n    const center = new THREE.Vector3();\n    const sphere = new THREE.Sphere();\n    const height = box3.max.y - box3.min.y;\n    const width = box3.max.x - box3.min.x;\n    box3.getCenter(center);\n    box3.getBoundingSphere(sphere);\n    set({\n      radius: sphere.radius,\n      width,\n      height\n    });\n    outer.current.position.set(-center.x, -center.y + height / 2, -center.z);\n  }, [children]);\n  React.useLayoutEffect(() => {\n    if (adjustCamera) {\n      const y = radius / (height > width ? 1.5 : 2.5);\n      camera.position.set(0, radius * 0.5, radius * 2.5);\n      camera.near = 0.1;\n      camera.far = Math.max(5000, radius * 4);\n      camera.lookAt(0, y, 0);\n      const ctrl = defaultControls || (controls == null ? void 0 : controls.current);\n\n      if (ctrl) {\n        ctrl.target.set(0, y, 0);\n        ctrl.update();\n      }\n    }\n  }, [defaultControls, radius, height, width, adjustCamera]);\n  return (\n    /*#__PURE__*/\n    React.createElement(\"group\", props,\n    /*#__PURE__*/\n    React.createElement(\"group\", {\n      ref: outer\n    },\n    /*#__PURE__*/\n    React.createElement(\"group\", {\n      ref: inner\n    }, children)), contactShadow &&\n    /*#__PURE__*/\n    React.createElement(ContactShadows, _extends({\n      width: radius * 2,\n      height: radius * 2,\n      far: radius / 2\n    }, contactShadow)), environment &&\n    /*#__PURE__*/\n    React.createElement(Environment, {\n      preset: environment\n    }),\n    /*#__PURE__*/\n    React.createElement(\"ambientLight\", {\n      intensity: intensity / 3\n    }),\n    /*#__PURE__*/\n    React.createElement(\"spotLight\", {\n      penumbra: 1,\n      position: [config.main[0] * radius, config.main[1] * radius, config.main[2] * radius],\n      intensity: intensity * 2,\n      castShadow: shadows,\n      \"shadow-bias\": shadowBias\n    }),\n    /*#__PURE__*/\n    React.createElement(\"pointLight\", {\n      position: [config.fill[0] * radius, config.fill[1] * radius, config.fill[2] * radius],\n      intensity: intensity\n    }))\n  );\n}\n\nexport { Stage };","map":null,"metadata":{},"sourceType":"module"}