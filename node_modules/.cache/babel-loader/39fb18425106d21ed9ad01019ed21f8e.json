{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { NodeLib } from '../core/NodeLib.js';\n\nfunction NormalNode(scope) {\n  TempNode.call(this, 'v3');\n  this.scope = scope || NormalNode.VIEW;\n}\n\nNormalNode.LOCAL = 'local';\nNormalNode.WORLD = 'world';\nNormalNode.VIEW = 'view';\nNormalNode.prototype = Object.create(TempNode.prototype);\nNormalNode.prototype.constructor = NormalNode;\nNormalNode.prototype.nodeType = 'Normal';\n\nNormalNode.prototype.getShared = function () {\n  // if shared is false, TempNode will not create temp variable (for optimization)\n  return this.scope === NormalNode.WORLD;\n};\n\nNormalNode.prototype.build = function (builder, output, uuid, ns) {\n  var contextNormal = builder.context[this.scope + 'Normal'];\n\n  if (contextNormal) {\n    return contextNormal.build(builder, output, uuid, ns);\n  }\n\n  return TempNode.prototype.build.call(this, builder, output, uuid);\n};\n\nNormalNode.prototype.generate = function (builder, output) {\n  var result;\n\n  switch (this.scope) {\n    case NormalNode.VIEW:\n      if (builder.isShader('vertex')) result = 'transformedNormal';else result = 'geometryNormal';\n      break;\n\n    case NormalNode.LOCAL:\n      if (builder.isShader('vertex')) {\n        result = 'objectNormal';\n      } else {\n        builder.requires.normal = true;\n        result = 'vObjectNormal';\n      }\n\n      break;\n\n    case NormalNode.WORLD:\n      if (builder.isShader('vertex')) {\n        result = 'inverseTransformDirection( transformedNormal, viewMatrix ).xyz';\n      } else {\n        builder.requires.worldNormal = true;\n        result = 'vWNormal';\n      }\n\n      break;\n  }\n\n  return builder.format(result, this.getType(builder), output);\n};\n\nNormalNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.scope = source.scope;\n  return this;\n};\n\nNormalNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.scope = this.scope;\n  }\n\n  return data;\n};\n\nNodeLib.addKeyword('viewNormal', function () {\n  return new NormalNode(NormalNode.VIEW);\n});\nNodeLib.addKeyword('localNormal', function () {\n  return new NormalNode(NormalNode.NORMAL);\n});\nNodeLib.addKeyword('worldNormal', function () {\n  return new NormalNode(NormalNode.WORLD);\n});\nexport { NormalNode };","map":null,"metadata":{},"sourceType":"module"}