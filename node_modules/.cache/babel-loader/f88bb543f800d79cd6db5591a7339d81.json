{"ast":null,"code":"import _slicedToArray from \"/home/zeus/Personal/Portfolio-V2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/zeus/Personal/Portfolio-V2/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport { useFrame, extend } from '@react-three/fiber';\nimport { Line2, LineMaterial, LineSegmentsGeometry } from 'three-stdlib';\nconst context =\n/*#__PURE__*/\nReact.createContext(null);\n\nconst arrColor = color => color instanceof THREE.Color ? color.toArray() : color;\n\nconst arrPos = pos => pos instanceof THREE.Vector3 ? pos.toArray() : pos;\n\nconst Segments =\n/*#__PURE__*/\nReact.forwardRef((props, forwardedRef) => {\n  const _props$limit = props.limit,\n        limit = _props$limit === void 0 ? 1000 : _props$limit,\n        _props$lineWidth = props.lineWidth,\n        lineWidth = _props$lineWidth === void 0 ? 1.0 : _props$lineWidth,\n        children = props.children,\n        rest = _objectWithoutProperties(props, [\"limit\", \"lineWidth\", \"children\"]);\n\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        segments = _React$useState2[0],\n        setSegments = _React$useState2[1];\n\n  const _React$useState3 = React.useState(() => new Line2()),\n        _React$useState4 = _slicedToArray(_React$useState3, 1),\n        line = _React$useState4[0];\n\n  const _React$useState5 = React.useState(() => new LineMaterial()),\n        _React$useState6 = _slicedToArray(_React$useState5, 1),\n        material = _React$useState6[0];\n\n  const _React$useState7 = React.useState(() => new LineSegmentsGeometry()),\n        _React$useState8 = _slicedToArray(_React$useState7, 1),\n        geometry = _React$useState8[0];\n\n  const _React$useState9 = React.useState(() => new THREE.Vector2(512, 512)),\n        _React$useState10 = _slicedToArray(_React$useState9, 1),\n        resolution = _React$useState10[0];\n\n  const _React$useState11 = React.useState(() => Array(limit * 6).fill(0)),\n        _React$useState12 = _slicedToArray(_React$useState11, 1),\n        positions = _React$useState12[0];\n\n  const _React$useState13 = React.useState(() => Array(limit * 6).fill(0)),\n        _React$useState14 = _slicedToArray(_React$useState13, 1),\n        colors = _React$useState14[0];\n\n  const api = React.useMemo(() => ({\n    subscribe: ref => {\n      setSegments(segments => [...segments, ref]);\n      return () => setSegments(segments => segments.filter(item => item.current !== ref.current));\n    }\n  }), []);\n  useFrame(() => {\n    for (let i = 0; i < limit; i++) {\n      var _segments$i;\n\n      const segment = (_segments$i = segments[i]) == null ? void 0 : _segments$i.current;\n      const segmentStart = segment ? arrPos(segment.start) : [0, 0, 0];\n      const segmentEnd = segment ? arrPos(segment.end) : [0, 0, 0];\n      const segmentColor = segment ? arrColor(segment.color) : [1, 1, 1]; //console.log(segmentStart, segmentEnd, segmentColor)\n\n      for (var j = 0; j < 3; j++) {\n        positions[i * 6 + j] = segmentStart[j];\n        positions[i * 6 + j + 3] = segmentEnd[j];\n        colors[i * 6 + j] = segmentColor[j];\n        colors[i * 6 + j + 3] = segmentColor[j];\n      }\n    }\n\n    geometry.setColors(colors);\n    geometry.setPositions(positions);\n    line.computeLineDistances();\n  });\n  return (\n    /*#__PURE__*/\n    React.createElement(\"primitive\", {\n      object: line,\n      ref: forwardedRef\n    },\n    /*#__PURE__*/\n    React.createElement(\"primitive\", {\n      object: geometry,\n      attach: \"geometry\"\n    }),\n    /*#__PURE__*/\n    React.createElement(\"primitive\", _extends({\n      object: material,\n      attach: \"material\",\n      vertexColors: true,\n      resolution: resolution,\n      linewidth: lineWidth\n    }, rest)),\n    /*#__PURE__*/\n    React.createElement(context.Provider, {\n      value: api\n    }, children))\n  );\n});\n\nclass SegmentObject {\n  constructor() {\n    this.color = new THREE.Color('white');\n    this.start = new THREE.Vector3(0, 0, 0);\n    this.end = new THREE.Vector3(0, 0, 0);\n  }\n\n}\n\nconst Segment =\n/*#__PURE__*/\nReact.forwardRef((props, forwardedRef) => {\n  const api = React.useContext(context);\n  if (!api) throw 'Segment must used inside Segments component.';\n  const ref = React.useRef();\n  React.useMemo(() => extend({\n    SegmentObject\n  }), []);\n  React.useLayoutEffect(() => api.subscribe(ref), []);\n  return (\n    /*#__PURE__*/\n    React.createElement(\"segmentObject\", _extends({\n      ref: mergeRefs([ref, forwardedRef])\n    }, props))\n  );\n});\nexport { Segment, Segments };","map":null,"metadata":{},"sourceType":"module"}