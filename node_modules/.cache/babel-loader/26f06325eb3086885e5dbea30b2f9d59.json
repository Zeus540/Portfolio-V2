{"ast":null,"code":"import _slicedToArray from \"/home/zeus/Personal/Portfolio-V2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\n\nclass PointMaterialImpl extends THREE.PointsMaterial {\n  constructor(props) {\n    super(props);\n\n    this.onBeforeCompile = shader => {\n      shader.fragmentShader = shader.fragmentShader.replace('#include <output_fragment>', `\n        #include <output_fragment>\n      vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n      float r = dot(cxy, cxy);\n      float delta = fwidth(r);     \n      float mask = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);\n      gl_FragColor = vec4(gl_FragColor.rgb, mask * gl_FragColor.a );\n      `);\n    };\n  }\n\n}\n\nconst PointMaterial =\n/*#__PURE__*/\nReact.forwardRef((props, ref) => {\n  const _React$useState = React.useState(() => new PointMaterialImpl(null)),\n        _React$useState2 = _slicedToArray(_React$useState, 1),\n        material = _React$useState2[0];\n\n  return (\n    /*#__PURE__*/\n    React.createElement(\"primitive\", _extends({\n      object: material,\n      ref: ref,\n      attach: \"material\"\n    }, props))\n  );\n});\nexport { PointMaterial, PointMaterialImpl };","map":null,"metadata":{},"sourceType":"module"}