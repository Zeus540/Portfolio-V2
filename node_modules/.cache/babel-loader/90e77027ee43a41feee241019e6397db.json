{"ast":null,"code":"import _slicedToArray from \"/home/zeus/Personal/Portfolio-V2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Text as Text$1, preloadFont } from 'troika-three-text';\nimport { useThree } from '@react-three/fiber';\nimport { suspend } from 'suspend-react'; // eslint-disable-next-line prettier/prettier\n\nconst Text =\n/*#__PURE__*/\nReact.forwardRef(({\n  anchorX = 'center',\n  anchorY = 'middle',\n  font,\n  children,\n  onSync,\n  ...props\n}, ref) => {\n  const invalidate = useThree(({\n    invalidate\n  }) => invalidate);\n\n  const _React$useState = React.useState(() => new Text$1()),\n        _React$useState2 = _slicedToArray(_React$useState, 1),\n        troikaMesh = _React$useState2[0];\n\n  const _React$useMemo = React.useMemo(() => {\n    const n = [];\n    let t = '';\n    React.Children.forEach(children, child => {\n      if (typeof child === 'string' || typeof child === 'number') {\n        t += child;\n      } else {\n        n.push(child);\n      }\n    });\n    return [n, t];\n  }, [children]),\n        _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n        nodes = _React$useMemo2[0],\n        text = _React$useMemo2[1];\n\n  suspend(() => new Promise(res => preloadFont({\n    font,\n    characters: text\n  }, res)), ['troika-text', font, text]);\n  React.useLayoutEffect(() => void troikaMesh.sync(() => {\n    invalidate();\n    if (onSync) onSync(troikaMesh);\n  }));\n  React.useEffect(() => {\n    return () => troikaMesh.dispose();\n  }, [troikaMesh]);\n  return (\n    /*#__PURE__*/\n    React.createElement(\"primitive\", _extends({\n      object: troikaMesh,\n      ref: ref,\n      font: font,\n      text: text,\n      anchorX: anchorX,\n      anchorY: anchorY\n    }, props), nodes)\n  );\n});\nexport { Text };","map":null,"metadata":{},"sourceType":"module"}