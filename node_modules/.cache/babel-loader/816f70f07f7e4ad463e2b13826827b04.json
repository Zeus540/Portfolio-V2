{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { ConstNode } from '../core/ConstNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\n\nfunction LuminanceNode(rgb) {\n  TempNode.call(this, 'f');\n  this.rgb = rgb;\n}\n\nLuminanceNode.Nodes = function () {\n  var LUMA = new ConstNode('vec3 LUMA vec3( 0.2125, 0.7154, 0.0721 )');\n  var luminance = new FunctionNode([// Algorithm from Chapter 10 of Graphics Shaders\n  'float luminance( vec3 rgb ) {', '\treturn dot( rgb, LUMA );', '}'].join('\\n'), [LUMA]);\n  return {\n    LUMA: LUMA,\n    luminance: luminance\n  };\n}();\n\nLuminanceNode.prototype = Object.create(TempNode.prototype);\nLuminanceNode.prototype.constructor = LuminanceNode;\nLuminanceNode.prototype.nodeType = 'Luminance';\n\nLuminanceNode.prototype.generate = function (builder, output) {\n  var luminance = builder.include(LuminanceNode.Nodes.luminance);\n  return builder.format(luminance + '( ' + this.rgb.build(builder, 'v3') + ' )', this.getType(builder), output);\n};\n\nLuminanceNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.rgb = source.rgb;\n  return this;\n};\n\nLuminanceNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.rgb = this.rgb.toJSON(meta).uuid;\n  }\n\n  return data;\n};\n\nexport { LuminanceNode };","map":null,"metadata":{},"sourceType":"module"}