{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\n\nfunction OperatorNode(a, b, op) {\n  TempNode.call(this);\n  this.a = a;\n  this.b = b;\n  this.op = op;\n}\n\nOperatorNode.ADD = '+';\nOperatorNode.SUB = '-';\nOperatorNode.MUL = '*';\nOperatorNode.DIV = '/';\nOperatorNode.prototype = Object.create(TempNode.prototype);\nOperatorNode.prototype.constructor = OperatorNode;\nOperatorNode.prototype.nodeType = 'Operator';\n\nOperatorNode.prototype.getType = function (builder) {\n  var a = this.a.getType(builder),\n      b = this.b.getType(builder);\n\n  if (builder.isTypeMatrix(a)) {\n    return 'v4';\n  } else if (builder.getTypeLength(b) > builder.getTypeLength(a)) {\n    // use the greater length vector\n    return b;\n  }\n\n  return a;\n};\n\nOperatorNode.prototype.generate = function (builder, output) {\n  var type = this.getType(builder);\n  var a = this.a.build(builder, type),\n      b = this.b.build(builder, type);\n  return builder.format('( ' + a + ' ' + this.op + ' ' + b + ' )', type, output);\n};\n\nOperatorNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.a = source.a;\n  this.b = source.b;\n  this.op = source.op;\n  return this;\n};\n\nOperatorNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.a = this.a.toJSON(meta).uuid;\n    data.b = this.b.toJSON(meta).uuid;\n    data.op = this.op;\n  }\n\n  return data;\n};\n\nexport { OperatorNode };","map":null,"metadata":{},"sourceType":"module"}