{"ast":null,"code":"import { TempNode } from './TempNode.js';\n\nfunction InputNode(type, params) {\n  params = params || {};\n  params.shared = params.shared !== undefined ? params.shared : false;\n  TempNode.call(this, type, params);\n  this.readonly = false;\n}\n\nInputNode.prototype = Object.create(TempNode.prototype);\nInputNode.prototype.constructor = InputNode;\n\nInputNode.prototype.setReadonly = function (value) {\n  this.readonly = value;\n  this.hashProperties = this.readonly ? ['value'] : undefined;\n  return this;\n};\n\nInputNode.prototype.getReadonly = function ()\n/* builder */\n{\n  return this.readonly;\n};\n\nInputNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  if (source.readonly !== undefined) this.readonly = source.readonly;\n  return this;\n};\n\nInputNode.prototype.createJSONNode = function (meta) {\n  var data = TempNode.prototype.createJSONNode.call(this, meta);\n  if (this.readonly === true) data.readonly = this.readonly;\n  return data;\n};\n\nInputNode.prototype.generate = function (builder, output, uuid, type, ns, needsUpdate) {\n  uuid = builder.getUuid(uuid || this.getUuid());\n  type = type || this.getType(builder);\n  var data = builder.getNodeData(uuid),\n      readonly = this.getReadonly(builder) && this.generateReadonly !== undefined;\n\n  if (readonly) {\n    return this.generateReadonly(builder, output, uuid, type, ns, needsUpdate);\n  } else {\n    if (builder.isShader('vertex')) {\n      if (!data.vertex) {\n        data.vertex = builder.createVertexUniform(type, this, ns, needsUpdate, this.getLabel());\n      }\n\n      return builder.format(data.vertex.name, type, output);\n    } else {\n      if (!data.fragment) {\n        data.fragment = builder.createFragmentUniform(type, this, ns, needsUpdate, this.getLabel());\n      }\n\n      return builder.format(data.fragment.name, type, output);\n    }\n  }\n};\n\nexport { InputNode };","map":null,"metadata":{},"sourceType":"module"}