{"ast":null,"code":"import _slicedToArray from \"/home/zeus/Personal/Portfolio-V2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector2, Vector3, Color } from 'three';\nimport { Line2, LineMaterial, LineGeometry } from 'three-stdlib';\nconst Line =\n/*#__PURE__*/\nReact.forwardRef(function Line({\n  points,\n  color = 'black',\n  vertexColors,\n  lineWidth,\n  dashed,\n  ...rest\n}, ref) {\n  const _React$useState = React.useState(() => new Line2()),\n        _React$useState2 = _slicedToArray(_React$useState, 1),\n        line2 = _React$useState2[0];\n\n  const _React$useState3 = React.useState(() => new LineMaterial()),\n        _React$useState4 = _slicedToArray(_React$useState3, 1),\n        lineMaterial = _React$useState4[0];\n\n  const _React$useState5 = React.useState(() => new Vector2(512, 512)),\n        _React$useState6 = _slicedToArray(_React$useState5, 1),\n        resolution = _React$useState6[0];\n\n  const lineGeom = React.useMemo(() => {\n    const geom = new LineGeometry();\n    const pValues = points.map(p => p instanceof Vector3 ? p.toArray() : p);\n    geom.setPositions(pValues.flat());\n\n    if (vertexColors) {\n      const cValues = vertexColors.map(c => c instanceof Color ? c.toArray() : c);\n      geom.setColors(cValues.flat());\n    }\n\n    return geom;\n  }, [points, vertexColors]);\n  React.useLayoutEffect(() => {\n    line2.computeLineDistances();\n  }, [points, line2]);\n  React.useLayoutEffect(() => {\n    if (dashed) {\n      lineMaterial.defines.USE_DASH = '';\n    } else {\n      // Setting lineMaterial.defines.USE_DASH to undefined is apparently not sufficient.\n      delete lineMaterial.defines.USE_DASH;\n    }\n\n    lineMaterial.needsUpdate = true;\n  }, [dashed, lineMaterial]);\n  React.useEffect(() => {\n    return () => lineGeom.dispose();\n  }, [lineGeom]);\n  return (\n    /*#__PURE__*/\n    React.createElement(\"primitive\", _extends({\n      object: line2,\n      ref: ref\n    }, rest),\n    /*#__PURE__*/\n    React.createElement(\"primitive\", {\n      object: lineGeom,\n      attach: \"geometry\"\n    }),\n    /*#__PURE__*/\n    React.createElement(\"primitive\", _extends({\n      object: lineMaterial,\n      attach: \"material\",\n      color: color,\n      vertexColors: Boolean(vertexColors),\n      resolution: resolution,\n      linewidth: lineWidth,\n      dashed: dashed\n    }, rest)))\n  );\n});\nexport { Line };","map":null,"metadata":{},"sourceType":"module"}