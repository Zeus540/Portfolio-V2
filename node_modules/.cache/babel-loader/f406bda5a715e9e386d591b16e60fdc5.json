{"ast":null,"code":"import _slicedToArray from \"/home/zeus/Personal/Portfolio-V2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { WebGLMultisampleRenderTarget, RGBAFormat, sRGBEncoding } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { EffectComposer, RenderPass, ShaderPass, GammaCorrectionShader } from 'three-stdlib';\nimport mergeRefs from 'react-merge-refs';\nextend({\n  EffectComposer,\n  RenderPass,\n  ShaderPass\n});\n\nconst isWebGL2Available = () => {\n  try {\n    var canvas = document.createElement('canvas');\n    return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst Effects =\n/*#__PURE__*/\nReact.forwardRef(({\n  children,\n  multisamping = 8,\n  renderIndex = 1,\n  disableGamma = false,\n  disableRenderPass = false,\n  ...props\n}, ref) => {\n  const composer = React.useRef();\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const size = useThree(({\n    size\n  }) => size);\n\n  const _React$useState = React.useState(() => {\n    if (isWebGL2Available() && multisamping > 0) {\n      const t = new WebGLMultisampleRenderTarget(size.width, size.height, {\n        format: RGBAFormat,\n        encoding: sRGBEncoding\n      });\n      t.samples = 8;\n      return t;\n    }\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 1),\n        target = _React$useState2[0];\n\n  React.useEffect(() => {\n    var _composer$current, _composer$current2;\n\n    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);\n    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(gl.getPixelRatio());\n  }, [gl, size]);\n  useFrame(() => {\n    var _composer$current3;\n\n    return (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();\n  }, renderIndex);\n  return (\n    /*#__PURE__*/\n    React.createElement(\"effectComposer\", _extends({\n      ref: mergeRefs([ref, composer]),\n      args: [gl, target]\n    }, props), !disableRenderPass &&\n    /*#__PURE__*/\n    React.createElement(\"renderPass\", {\n      attachArray: \"passes\",\n      args: [scene, camera]\n    }), !disableGamma &&\n    /*#__PURE__*/\n    React.createElement(\"shaderPass\", {\n      attachArray: \"passes\",\n      args: [GammaCorrectionShader]\n    }), children)\n  );\n});\nexport { Effects, isWebGL2Available };","map":null,"metadata":{},"sourceType":"module"}