{"ast":null,"code":"import _slicedToArray from \"/home/zeus/Personal/Portfolio-V2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { WebGLCubeRenderTarget, LinearFilter } from 'three';\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nfunction CubeCamera({\n  children,\n  fog,\n  frames = Infinity,\n  resolution = 256,\n  near = 1,\n  far = 1000,\n  ...props\n}) {\n  const ref = React.useRef();\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        camera = _React$useState2[0],\n        setCamera = _React$useState2[1];\n\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const fbo = React.useMemo(() => new WebGLCubeRenderTarget(resolution, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    encoding: gl.outputEncoding\n  }), [resolution]);\n  let count = 0;\n  useFrame(() => {\n    if (camera && ref.current && (frames === Infinity || count < frames)) {\n      ref.current.traverse(obj => obj.visible = false);\n      const originalFog = scene.fog;\n      scene.fog = fog || originalFog;\n      camera.update(gl, scene);\n      scene.fog = originalFog;\n      ref.current.traverse(obj => obj.visible = true);\n      count++;\n    }\n  });\n  return (\n    /*#__PURE__*/\n    React.createElement(\"group\", props,\n    /*#__PURE__*/\n    React.createElement(\"cubeCamera\", {\n      ref: setCamera,\n      args: [near, far, fbo]\n    }),\n    /*#__PURE__*/\n    React.createElement(\"group\", {\n      ref: ref\n    }, children(fbo.texture)))\n  );\n}\n\nexport { CubeCamera };","map":null,"metadata":{},"sourceType":"module"}