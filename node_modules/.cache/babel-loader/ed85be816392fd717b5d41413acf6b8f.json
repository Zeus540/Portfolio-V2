{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTokenType = exports.hasExtendingTokensTypesMapProperty = exports.hasExtendingTokensTypesProperty = exports.hasCategoriesProperty = exports.hasShortKeyProperty = exports.singleAssignCategoriesToksMap = exports.assignCategoriesMapProp = exports.assignCategoriesTokensProp = exports.assignTokenDefaultProps = exports.expandCategories = exports.augmentTokenTypes = exports.tokenIdxToClass = exports.tokenShortNameIdx = exports.tokenStructuredMatcherNoCategories = exports.tokenStructuredMatcher = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nfunction tokenStructuredMatcher(tokInstance, tokConstructor) {\n  var instanceType = tokInstance.tokenTypeIdx;\n\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return tokConstructor.isParent === true && tokConstructor.categoryMatchesMap[instanceType] === true;\n  }\n}\n\nexports.tokenStructuredMatcher = tokenStructuredMatcher; // Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\n\nfunction tokenStructuredMatcherNoCategories(token, tokType) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\n\nexports.tokenStructuredMatcherNoCategories = tokenStructuredMatcherNoCategories;\nexports.tokenShortNameIdx = 1;\nexports.tokenIdxToClass = {};\n\nfunction augmentTokenTypes(tokenTypes) {\n  // collect the parent Token Types as well.\n  var tokenTypesAndParents = expandCategories(tokenTypes); // add required tokenType and categoryMatches properties\n\n  assignTokenDefaultProps(tokenTypesAndParents); // fill up the categoryMatches\n\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n  (0, utils_1.forEach)(tokenTypesAndParents, function (tokType) {\n    tokType.isParent = tokType.categoryMatches.length > 0;\n  });\n}\n\nexports.augmentTokenTypes = augmentTokenTypes;\n\nfunction expandCategories(tokenTypes) {\n  var result = (0, utils_1.cloneArr)(tokenTypes);\n  var categories = tokenTypes;\n  var searching = true;\n\n  while (searching) {\n    categories = (0, utils_1.compact)((0, utils_1.flatten)((0, utils_1.map)(categories, function (currTokType) {\n      return currTokType.CATEGORIES;\n    })));\n    var newCategories = (0, utils_1.difference)(categories, result);\n    result = result.concat(newCategories);\n\n    if ((0, utils_1.isEmpty)(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n\n  return result;\n}\n\nexports.expandCategories = expandCategories;\n\nfunction assignTokenDefaultProps(tokenTypes) {\n  (0, utils_1.forEach)(tokenTypes, function (currTokType) {\n    if (!hasShortKeyProperty(currTokType)) {\n      exports.tokenIdxToClass[exports.tokenShortNameIdx] = currTokType;\n      currTokType.tokenTypeIdx = exports.tokenShortNameIdx++;\n    } // CATEGORIES? : TokenType | TokenType[]\n\n\n    if (hasCategoriesProperty(currTokType) && !(0, utils_1.isArray)(currTokType.CATEGORIES) // &&\n    // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n        currTokType.CATEGORIES = [currTokType.CATEGORIES];\n      }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\n\nexports.assignTokenDefaultProps = assignTokenDefaultProps;\n\nfunction assignCategoriesTokensProp(tokenTypes) {\n  (0, utils_1.forEach)(tokenTypes, function (currTokType) {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    (0, utils_1.forEach)(currTokType.categoryMatchesMap, function (val, key) {\n      currTokType.categoryMatches.push(exports.tokenIdxToClass[key].tokenTypeIdx);\n    });\n  });\n}\n\nexports.assignCategoriesTokensProp = assignCategoriesTokensProp;\n\nfunction assignCategoriesMapProp(tokenTypes) {\n  (0, utils_1.forEach)(tokenTypes, function (currTokType) {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\n\nexports.assignCategoriesMapProp = assignCategoriesMapProp;\n\nfunction singleAssignCategoriesToksMap(path, nextNode) {\n  (0, utils_1.forEach)(path, function (pathNode) {\n    nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n  });\n  (0, utils_1.forEach)(nextNode.CATEGORIES, function (nextCategory) {\n    var newPath = path.concat(nextNode); // avoids infinite loops due to cyclic categories.\n\n    if (!(0, utils_1.contains)(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\n\nexports.singleAssignCategoriesToksMap = singleAssignCategoriesToksMap;\n\nfunction hasShortKeyProperty(tokType) {\n  return (0, utils_1.has)(tokType, \"tokenTypeIdx\");\n}\n\nexports.hasShortKeyProperty = hasShortKeyProperty;\n\nfunction hasCategoriesProperty(tokType) {\n  return (0, utils_1.has)(tokType, \"CATEGORIES\");\n}\n\nexports.hasCategoriesProperty = hasCategoriesProperty;\n\nfunction hasExtendingTokensTypesProperty(tokType) {\n  return (0, utils_1.has)(tokType, \"categoryMatches\");\n}\n\nexports.hasExtendingTokensTypesProperty = hasExtendingTokensTypesProperty;\n\nfunction hasExtendingTokensTypesMapProperty(tokType) {\n  return (0, utils_1.has)(tokType, \"categoryMatchesMap\");\n}\n\nexports.hasExtendingTokensTypesMapProperty = hasExtendingTokensTypesMapProperty;\n\nfunction isTokenType(tokType) {\n  return (0, utils_1.has)(tokType, \"tokenTypeIdx\");\n}\n\nexports.isTokenType = isTokenType;","map":null,"metadata":{},"sourceType":"script"}