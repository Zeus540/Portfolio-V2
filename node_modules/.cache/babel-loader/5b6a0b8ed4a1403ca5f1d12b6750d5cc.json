{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { PositionNode } from './PositionNode.js';\n\nfunction CameraNode(scope, camera) {\n  TempNode.call(this, 'v3');\n  this.setScope(scope || CameraNode.POSITION);\n  this.setCamera(camera);\n}\n\nCameraNode.Nodes = function () {\n  var depthColor = new FunctionNode(['float depthColor( float mNear, float mFar ) {', '\t#ifdef USE_LOGDEPTHBUF_EXT', '\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;', '\t#else', '\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;', '\t#endif', '\treturn 1.0 - smoothstep( mNear, mFar, depth );', '}'].join('\\n'));\n  return {\n    depthColor: depthColor\n  };\n}();\n\nCameraNode.POSITION = 'position';\nCameraNode.DEPTH = 'depth';\nCameraNode.TO_VERTEX = 'toVertex';\nCameraNode.prototype = Object.create(TempNode.prototype);\nCameraNode.prototype.constructor = CameraNode;\nCameraNode.prototype.nodeType = 'Camera';\n\nCameraNode.prototype.setCamera = function (camera) {\n  this.camera = camera;\n  this.updateFrame = camera !== undefined ? this.onUpdateFrame : undefined;\n};\n\nCameraNode.prototype.setScope = function (scope) {\n  switch (this.scope) {\n    case CameraNode.DEPTH:\n      delete this.near;\n      delete this.far;\n      break;\n  }\n\n  this.scope = scope;\n\n  switch (scope) {\n    case CameraNode.DEPTH:\n      var camera = this.camera;\n      this.near = new FloatNode(camera ? camera.near : 1);\n      this.far = new FloatNode(camera ? camera.far : 1200);\n      break;\n  }\n};\n\nCameraNode.prototype.getType = function ()\n/* builder */\n{\n  switch (this.scope) {\n    case CameraNode.DEPTH:\n      return 'f';\n  }\n\n  return this.type;\n};\n\nCameraNode.prototype.getUnique = function ()\n/* builder */\n{\n  switch (this.scope) {\n    case CameraNode.DEPTH:\n    case CameraNode.TO_VERTEX:\n      return true;\n  }\n\n  return false;\n};\n\nCameraNode.prototype.getShared = function ()\n/* builder */\n{\n  switch (this.scope) {\n    case CameraNode.POSITION:\n      return false;\n  }\n\n  return true;\n};\n\nCameraNode.prototype.generate = function (builder, output) {\n  var result;\n\n  switch (this.scope) {\n    case CameraNode.POSITION:\n      result = 'cameraPosition';\n      break;\n\n    case CameraNode.DEPTH:\n      var depthColor = builder.include(CameraNode.Nodes.depthColor);\n      result = depthColor + '( ' + this.near.build(builder, 'f') + ', ' + this.far.build(builder, 'f') + ' )';\n      break;\n\n    case CameraNode.TO_VERTEX:\n      result = 'normalize( ' + new PositionNode(PositionNode.WORLD).build(builder, 'v3') + ' - cameraPosition )';\n      break;\n  }\n\n  return builder.format(result, this.getType(builder), output);\n};\n\nCameraNode.prototype.onUpdateFrame = function ()\n/* frame */\n{\n  switch (this.scope) {\n    case CameraNode.DEPTH:\n      var camera = this.camera;\n      this.near.value = camera.near;\n      this.far.value = camera.far;\n      break;\n  }\n};\n\nCameraNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.setScope(source.scope);\n\n  if (source.camera) {\n    this.setCamera(source.camera);\n  }\n\n  switch (source.scope) {\n    case CameraNode.DEPTH:\n      this.near.number = source.near;\n      this.far.number = source.far;\n      break;\n  }\n\n  return this;\n};\n\nCameraNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.scope = this.scope;\n    if (this.camera) data.camera = this.camera.uuid;\n\n    switch (this.scope) {\n      case CameraNode.DEPTH:\n        data.near = this.near.value;\n        data.far = this.far.value;\n        break;\n    }\n  }\n\n  return data;\n};\n\nexport { CameraNode };","map":null,"metadata":{},"sourceType":"module"}