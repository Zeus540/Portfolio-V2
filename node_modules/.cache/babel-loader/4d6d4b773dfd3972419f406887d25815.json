{"ast":null,"code":"import _slicedToArray from \"/home/zeus/Personal/Portfolio-V2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { MeshStandardMaterial } from 'three';\nimport { useFrame } from '@react-three/fiber';\n\nclass WobbleMaterialImpl extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this.setValues(parameters);\n    this._time = {\n      value: 0\n    };\n    this._factor = {\n      value: 1\n    };\n  }\n\n  onBeforeCompile(shader) {\n    shader.uniforms.time = this._time;\n    shader.uniforms.factor = this._factor;\n    shader.vertexShader = `\n      uniform float time;\n      uniform float factor;\n      ${shader.vertexShader}\n    `;\n    shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>', `float theta = sin( time + position.y ) / 2.0 * factor;\n        float c = cos( theta );\n        float s = sin( theta );\n        mat3 m = mat3( c, 0, s, 0, 1, 0, -s, 0, c );\n        vec3 transformed = vec3( position ) * m;\n        vNormal = vNormal * m;`);\n  }\n\n  get time() {\n    return this._time.value;\n  }\n\n  set time(v) {\n    this._time.value = v;\n  }\n\n  get factor() {\n    return this._factor.value;\n  }\n\n  set factor(v) {\n    this._factor.value = v;\n  }\n\n}\n\nconst MeshWobbleMaterial =\n/*#__PURE__*/\nReact.forwardRef(({\n  speed = 1,\n  ...props\n}, ref) => {\n  const _React$useState = React.useState(() => new WobbleMaterialImpl()),\n        _React$useState2 = _slicedToArray(_React$useState, 1),\n        material = _React$useState2[0];\n\n  useFrame(state => material && (material.time = state.clock.getElapsedTime() * speed));\n  return (\n    /*#__PURE__*/\n    React.createElement(\"primitive\", _extends({\n      dispose: undefined,\n      object: material,\n      ref: ref,\n      attach: \"material\"\n    }, props))\n  );\n});\nexport { MeshWobbleMaterial };","map":null,"metadata":{},"sourceType":"module"}