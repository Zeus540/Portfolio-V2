{"ast":null,"code":"import _slicedToArray from \"/home/zeus/Personal/Portfolio-V2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { CanvasTexture } from 'three';\nimport { useGizmoContext } from './GizmoHelper.js';\n\nfunction Axis({\n  scale = [0.8, 0.05, 0.05],\n  color,\n  rotation\n}) {\n  return (\n    /*#__PURE__*/\n    React.createElement(\"group\", {\n      rotation: rotation\n    },\n    /*#__PURE__*/\n    React.createElement(\"mesh\", {\n      position: [0.4, 0, 0]\n    },\n    /*#__PURE__*/\n    React.createElement(\"boxGeometry\", {\n      args: scale\n    }),\n    /*#__PURE__*/\n    React.createElement(\"meshBasicMaterial\", {\n      color: color,\n      toneMapped: false\n    })))\n  );\n}\n\nfunction AxisHead({\n  onClick,\n  font,\n  disabled,\n  arcStyle,\n  label,\n  labelColor,\n  axisHeadScale = 1,\n  ...props\n}) {\n  const gl = useThree(state => state.gl);\n  const texture = React.useMemo(() => {\n    const canvas = document.createElement('canvas');\n    canvas.width = 64;\n    canvas.height = 64;\n    const context = canvas.getContext('2d');\n    context.beginPath();\n    context.arc(32, 32, 16, 0, 2 * Math.PI);\n    context.closePath();\n    context.fillStyle = arcStyle;\n    context.fill();\n\n    if (label) {\n      context.font = font;\n      context.textAlign = 'center';\n      context.fillStyle = labelColor;\n      context.fillText(label, 32, 41);\n    }\n\n    return new CanvasTexture(canvas);\n  }, [arcStyle, label, labelColor, font]);\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        active = _React$useState2[0],\n        setActive = _React$useState2[1];\n\n  const scale = (label ? 1 : 0.75) * (active ? 1.2 : 1) * axisHeadScale;\n\n  const handlePointerOver = e => {\n    e.stopPropagation();\n    setActive(true);\n  };\n\n  const handlePointerOut = e => {\n    e.stopPropagation();\n    setActive(false);\n  };\n\n  return (\n    /*#__PURE__*/\n    React.createElement(\"sprite\", _extends({\n      scale: scale,\n      onPointerOver: !disabled ? handlePointerOver : undefined,\n      onPointerOut: !disabled ? onClick || handlePointerOut : undefined\n    }, props),\n    /*#__PURE__*/\n    React.createElement(\"spriteMaterial\", {\n      map: texture,\n      \"map-anisotropy\": gl.capabilities.getMaxAnisotropy() || 1,\n      alphaTest: 0.3,\n      opacity: label ? 1 : 0.75,\n      toneMapped: false\n    }))\n  );\n}\n\nconst GizmoViewport = ({\n  hideNegativeAxes,\n  hideAxisHeads,\n  disabled,\n  font = '18px Inter var, Arial, sans-serif',\n  axisColors = ['#ff3653', '#0adb50', '#2c8fdf'],\n  axisHeadScale = 1,\n  axisScale,\n  labels = ['X', 'Y', 'Z'],\n  labelColor = '#000',\n  onClick,\n  ...props\n}) => {\n  const _axisColors = _slicedToArray(axisColors, 3),\n        colorX = _axisColors[0],\n        colorY = _axisColors[1],\n        colorZ = _axisColors[2];\n\n  const _useGizmoContext = useGizmoContext(),\n        tweenCamera = _useGizmoContext.tweenCamera,\n        raycast = _useGizmoContext.raycast;\n\n  const axisHeadProps = {\n    font,\n    disabled,\n    labelColor,\n    raycast,\n    onClick,\n    axisHeadScale,\n    onPointerDown: !disabled ? e => {\n      tweenCamera(e.object.position);\n      e.stopPropagation();\n    } : undefined\n  };\n  return (\n    /*#__PURE__*/\n    React.createElement(\"group\", _extends({\n      scale: 40\n    }, props),\n    /*#__PURE__*/\n    React.createElement(Axis, {\n      color: colorX,\n      rotation: [0, 0, 0],\n      scale: axisScale\n    }),\n    /*#__PURE__*/\n    React.createElement(Axis, {\n      color: colorY,\n      rotation: [0, 0, Math.PI / 2],\n      scale: axisScale\n    }),\n    /*#__PURE__*/\n    React.createElement(Axis, {\n      color: colorZ,\n      rotation: [0, -Math.PI / 2, 0],\n      scale: axisScale\n    }), !hideAxisHeads &&\n    /*#__PURE__*/\n    React.createElement(React.Fragment, null,\n    /*#__PURE__*/\n    React.createElement(AxisHead, _extends({\n      arcStyle: colorX,\n      position: [1, 0, 0],\n      label: labels[0]\n    }, axisHeadProps)),\n    /*#__PURE__*/\n    React.createElement(AxisHead, _extends({\n      arcStyle: colorY,\n      position: [0, 1, 0],\n      label: labels[1]\n    }, axisHeadProps)),\n    /*#__PURE__*/\n    React.createElement(AxisHead, _extends({\n      arcStyle: colorZ,\n      position: [0, 0, 1],\n      label: labels[2]\n    }, axisHeadProps)), !hideNegativeAxes &&\n    /*#__PURE__*/\n    React.createElement(React.Fragment, null,\n    /*#__PURE__*/\n    React.createElement(AxisHead, _extends({\n      arcStyle: colorX,\n      position: [-1, 0, 0]\n    }, axisHeadProps)),\n    /*#__PURE__*/\n    React.createElement(AxisHead, _extends({\n      arcStyle: colorY,\n      position: [0, -1, 0]\n    }, axisHeadProps)),\n    /*#__PURE__*/\n    React.createElement(AxisHead, _extends({\n      arcStyle: colorZ,\n      position: [0, 0, -1]\n    }, axisHeadProps)))),\n    /*#__PURE__*/\n    React.createElement(\"ambientLight\", {\n      intensity: 0.5\n    }),\n    /*#__PURE__*/\n    React.createElement(\"pointLight\", {\n      position: [10, 10, 10],\n      intensity: 0.5\n    }))\n  );\n};\n\nexport { GizmoViewport };","map":null,"metadata":{},"sourceType":"module"}