{"ast":null,"code":"import { sRGBEncoding, LinearEncoding } from 'three';\nimport { TempNode } from '../core/TempNode.js';\nimport { ConstNode } from '../core/ConstNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\n\nfunction ColorSpaceNode(input, method) {\n  TempNode.call(this, 'v4');\n  this.input = input;\n  this.method = method || ColorSpaceNode.LINEAR_TO_LINEAR;\n}\n\nColorSpaceNode.Nodes = function () {\n  var LinearToLinear = new FunctionNode(['vec4 LinearToLinear( in vec4 value ) {', '\treturn value;', '}'].join('\\n'));\n  var sRGBToLinear = new FunctionNode(['vec4 sRGBToLinear( in vec4 value ) {', '\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );', '}'].join('\\n'));\n  var LinearTosRGB = new FunctionNode(['vec4 LinearTosRGB( in vec4 value ) {', '\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );', '}'].join('\\n')); // LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html\n  // M matrix, for encoding\n\n  var cLogLuvM = new ConstNode('const mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );');\n  var LinearToLogLuv = new FunctionNode(['vec4 LinearToLogLuv( in vec4 value ) {', '\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;', '\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));', '\tvec4 vResult;', '\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;', '\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;', '\tvResult.w = fract(Le);', '\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;', '\treturn vResult;', '}'].join('\\n'), [cLogLuvM]); // Inverse M matrix, for decoding\n\n  var cLogLuvInverseM = new ConstNode('const mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );');\n  var LogLuvToLinear = new FunctionNode(['vec4 LogLuvToLinear( in vec4 value ) {', '\tfloat Le = value.z * 255.0 + value.w;', '\tvec3 Xp_Y_XYZp;', '\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);', '\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;', '\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;', '\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;', '\treturn vec4( max(vRGB, 0.0), 1.0 );', '}'].join('\\n'), [cLogLuvInverseM]);\n  return {\n    LinearToLinear: LinearToLinear,\n    sRGBToLinear: sRGBToLinear,\n    LinearTosRGB: LinearTosRGB,\n    cLogLuvM: cLogLuvM,\n    LinearToLogLuv: LinearToLogLuv,\n    cLogLuvInverseM: cLogLuvInverseM,\n    LogLuvToLinear: LogLuvToLinear\n  };\n}();\n\nColorSpaceNode.LINEAR_TO_LINEAR = 'LinearToLinear';\nColorSpaceNode.SRGB_TO_LINEAR = 'sRGBToLinear';\nColorSpaceNode.LINEAR_TO_SRGB = 'LinearTosRGB';\nColorSpaceNode.RGBE_TO_LINEAR = 'RGBEToLinear';\nColorSpaceNode.LINEAR_TO_RGBE = 'LinearToRGBE';\nColorSpaceNode.LINEAR_TO_LOG_LUV = 'LinearToLogLuv';\nColorSpaceNode.LOG_LUV_TO_LINEAR = 'LogLuvToLinear';\n\nColorSpaceNode.getEncodingComponents = function (encoding) {\n  switch (encoding) {\n    case LinearEncoding:\n      return ['Linear'];\n\n    case sRGBEncoding:\n      return ['sRGB'];\n  }\n};\n\nColorSpaceNode.prototype = Object.create(TempNode.prototype);\nColorSpaceNode.prototype.constructor = ColorSpaceNode;\nColorSpaceNode.prototype.nodeType = 'ColorSpace';\nColorSpaceNode.prototype.hashProperties = ['method'];\n\nColorSpaceNode.prototype.generate = function (builder, output) {\n  var input = this.input.build(builder, 'v4');\n  var outputType = this.getType(builder);\n  var methodNode = ColorSpaceNode.Nodes[this.method];\n  var method = builder.include(methodNode);\n\n  if (method === ColorSpaceNode.LINEAR_TO_LINEAR) {\n    return builder.format(input, outputType, output);\n  } else {\n    if (methodNode.inputs.length === 2) {\n      var factor = this.factor.build(builder, 'f');\n      return builder.format(method + '( ' + input + ', ' + factor + ' )', outputType, output);\n    } else {\n      return builder.format(method + '( ' + input + ' )', outputType, output);\n    }\n  }\n};\n\nColorSpaceNode.prototype.fromEncoding = function (encoding) {\n  var components = ColorSpaceNode.getEncodingComponents(encoding);\n  this.method = 'LinearTo' + components[0];\n  this.factor = components[1];\n};\n\nColorSpaceNode.prototype.fromDecoding = function (encoding) {\n  var components = ColorSpaceNode.getEncodingComponents(encoding);\n  this.method = components[0] + 'ToLinear';\n  this.factor = components[1];\n};\n\nColorSpaceNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.input = source.input;\n  this.method = source.method;\n  return this;\n};\n\nColorSpaceNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.input = this.input.toJSON(meta).uuid;\n    data.method = this.method;\n  }\n\n  return data;\n};\n\nexport { ColorSpaceNode };","map":null,"metadata":{},"sourceType":"module"}